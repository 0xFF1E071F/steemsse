This file contains specific info that is necessary to implement a 6301 keyboard
chip (IKBD) emulation in an Atari ST emulation (spoiler alert!)
It is mainly based on the official doc for the MC6500 and the HD6301 by
Motorola and Hitachi, the indispensable doc by Stephane Catala - Belzebub 
/ ST Connexion, STMagazine No 53 - 55, and on the translation by Tobe, 
with some minor (gasp) corrections and additions by Steven Seagal.
===============================================================================

Interesting ST cases
=====================

Barbarian
Cobra Compil 1
Dragonnels (Menu, Unlimited Bobs, Great Plazma)
Froggies over the Fence (Menu)
Gauntlet
GEM
Jumping Jackson (Automation)
Lethal Xcess
Manchester United
NEOchrome
Sentinel
Transbeauce 2 (Menu)

Internal Registers
===================

Internal registers can be accessed by the program, but some are read-only,
some are write-only. When reading a write-only register, one gets all bits
set ($FF). The DDR registers are write-only. Themselves determine which bits
of DR registers are read-only and which are write-only. If the bit is set in
the DDR, then the corresponding bit in DR is read-only (input).
In Sim6xx, they're identified with iram[].

==============================================================================
  * Data Registers
------------------------------------------------------------------------------
$0000    | B | DDR1  | Direction Data Register 1                      | WO
$0001    | B | DDR2  | Direction Data Register 2                      | WO
$0002    | B | DR1   | Data Register 1                                | RW
$0003    | B | DR2   | Data Register 2                                | RW
$0004    | B | DDR3  | Direction Data Register 3                      | WO
$0005    | B | DDR4  | Direction Data Register 4                      | WO
$0006    | B | DR3   | Data Register 3                                | RW
$0007    | B | DR4   | Data Register 4                                | RW
------------------------------------------------------------------------------
  * 16bit Timer
------------------------------------------------------------------------------
$0008    | B | TCSR  | Timer Control/Status Register                  | RW
$0009-A  | W | FRC   | Free Running Counter                           | RO
$000B-C  | W | OCR   | Output Compare Register                        | RW
$000D-E  | W | ICR   | Input Capture Register                         | RO
------------------------------------------------------------------------------
$000F    | B | CSR   | Unused Control/Status Register for DR3 SC1/SC2 |
------------------------------------------------------------------------------
  * Serial Communication Interface
------------------------------------------------------------------------------
$0010    | B | RMCR  | Rate & Mode Control Register                   | RW
$0011    | B | TRCSR | Transmit/Receive Control & Status Register     | RW
$0012    | B | RDR   | Receive Data Register                          | RO
$0013    | B | TDR   | Transmit Data Register                         | WO
------------------------------------------------------------------------------
  * RAM Control
------------------------------------------------------------------------------
$0014    | B | RCR   | RAM Control Register                           | RW
------------------------------------------------------------------------------


TRCSR ($11)
-----------

This register controls the communications.
In Sim6xx, there are defines for each bit (WU, etc.).
-Bit 0 (RW) : Wake Up (WU 0x01)
  ! WU set means "stand-by", not "awake".
  It is set by software and cleared by hardware (though it's RW).
  When the chip is in stand-by mode, a series of ten '1' bits will awake it.
  It seems that a working but not transmitting serial line does just that.
  Cases: Froggies leaving menu, Barbarian (hack in Steem gets more 
  mysterious...)
-Bit 1 (RW) : Transmit Enable (TE 0x02)
-Bit 2 (RW) : Transmit Interrupt Enable (TIE 0x04)
-Bit 3 (RW) : Receive Enable (RE 0x08)
  This bit is never cleared by the ROM in the ST.
-Bit 4 (RW) : Receive Interrupt Enable (RIE 0x10)
-Bit 5 (RO?) : Transmit Data Register Empty (TDRE 0x20)
  This bit is set when a byte has been sent, and is cleared by when TRCSR is 
  read then TDR is written, according to doc. 
  According to Hitachi doc, bit 5 (TDRE) is read-only, but the ROM wants to set
  it (writing $3A, $3E). This would trigger an interrupt as soon as they're 
  enabled ($3E would force an interrupt, in the ROM several conditions are 
  then checked).
  It may explain how some program operate (Cobra Compil 1).
-Bit 6 (RO) : Overrun or Framing Error (ORFE 0x40)
  Set when a byte is received if the previous byte was not read, cleared when 
  TRCSR then RDR are read.
  When a byte is received while the previous byte hasn't been read, the overrun
  flag is set by the hardware, it's cleared at next read. 
  The ROM sets the chip in stand-by mode when it detects an overrun. 
  This must be emulated because it does happen with some programs. 
  Fascinatingly, if you fail to emulate this Barbarian will be stuck, but for
  a totally different reason as in fake emulation ("Psygnosys hack").
-Bit 7 (RO) : Receive Data Register Full (RDRF 0x80)
  Set when a byte was received, cleared when TRSCR then RDR are read

The read-only bits are set and cleared by the hardware (or the emulation).



Speed, timings
===============

[Steem SSE 3.4]
The 6301 runs at 1Mhz, the M68000 at 8Mhz. The most practical way to integrate
both emulations is to run 1/8 CPU cycles every scanline.

Computing a theoretical #cycles for transmitting a byte:
7812.5 bit/s
976.5625 bytes/s
1 s = 1M 6301 cycles
976.5625 bytes in 1M cycles
1 byte in 1000000/976.5625 cycles = 1024 cycles

Value that works in the ST (esp. for loading a custom program): 1350 cycles


Double-buffering
=================

According to their doc, both the ACIA and the 6301 use double-buffering, which 
allows to have one value in the shift register (value being transmitted/
received) and another value in the I/O register.
A concrete implication is that you can write the first two bytes in a very 
short delay, and of course read a byte while another is being shifted.
Not sure it makes a difference, but it's implemented in Steem (optional 
#define).


DR registers in input mode
===========================

Those registers are handled in ireg.c in Sim6xx.

When you read DR registers, you really are checking the hardware. Those 
registers must reflect the situation of the hardware, not a static value in 
memory. For emulation, you may update the values at time of event, or when
the register is read.


Keyboard
=========

To read the keyboard, one uses DR1, DR3 & DR4 and their associated direction
registers DDR1, DDR3 & DDR4.
Bits 1-7 of DR3 are mapped to the first seven keyboard's matrix columns
(see keyboard table), and all bits of DR4 may be mapped to the remaining ones.
DR1 is mapped to the rows of the matrix.
DR1 is set in input mode (DDR1 0), DR3 & DR4 in ouput mode (DDR3, 4 FF), but
maybe we must consider bit by bit.

All bits of DR1 that are cleared in DDR1 (meaning input) are set. 
But if a key is pressed in the corresponding row (see table), and the bit in 
DDR3 or DDR4 corresponding to the column is set, and the corresponding 
bit in DR3 or DR4 is set (and not cleared like the doc states), the bit in DR1
 is cleared.
It seems rather complicated, but it's not hard to emulate. 

This precious table indicates how the keys change the state of registers.
The first row is shifted to the right compared with table by Tobe (from the
one in ST Magazine). 
Decimal numbers have been converted to more common hexadecimal.
The hex codes are the scancodes that will be returned by the 6301 program.
We have this funny situation where we send a scancode to the emulator, so that
it knows which registers to change to have the program send the very same 
scancode!
Most of the table can also be found in the ROM ($F319->$F370 + special keys),
each column following the other from #4 on ($3E,$1,$2,$F,...).

  //               DR3                |                  DR4                  |
  //  1 |  2 |  3 |  4 |  5 |  6 |  7 |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |
  //  FD   FB   F7   EF   DF   BF   7F   FE   FD   FB   F7   EF   DF   BF   7F
  // 002  004  008  010  020  040  080  001  002  004  008  010  020  040  080
  //  0    1    2    3    4    5    6    7    8    9   10   11   12   13   14
  ///////////////////////////////////////////////////////////////////////////// DR1
  {0x00,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x62,0x61,0x63,0x65},// 0
  {0x00,0x00,0x00,0x00,0x01,0x03,0x05,0x07,0x09,0x0B,0x0D,0x0E,0x48,0x64,0x66},// 1
  {0x00,0x00,0x00,0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x29,0x53,0x47,0x67,0x69},// 2
  {0x00,0x00,0x00,0x00,0x0F,0x11,0x13,0x15,0x16,0x18,0x1A,0x52,0x4B,0x68,0x4A},// 3
  {0x1D,0x00,0x00,0x00,0x10,0x12,0x14,0x22,0x17,0x19,0x1B,0x2B,0x50,0x6A,0x6C},// 4
  {0x00,0x2A,0x00,0x00,0x1E,0x1F,0x21,0x23,0x24,0x26,0x27,0x1C,0x4D,0x6B,0x4E},// 5
  {0x00,0x00,0x38,0x00,0x60,0x20,0x2E,0x30,0x25,0x33,0x34,0x28,0x6D,0x6E,0x6F},// 6
  {0x00,0x00,0x00,0x36,0x2C,0x2D,0x2F,0x31,0x32,0x39,0x3A,0x35,0x70,0x71,0x72} // 7

Here is a widely available, but not with those nice columns, table of 
scancodes/keys.

01	Esc	1B	]	35	/		4F	{ NOT USED }
02	1	1C	RET	36	(RIGHT) SHIFT	50	DOWN ARROW
03	2	1D	CTRL	37	{ NOT USED }	51	{ NOT USED }
04	3	1E	A	38	ALT		52	INSERT
05	4	1F	S	39	SPACE BAR	53	DEL
06	5	20	D	3A	CAPS LOCK	54	{ NOT USED }
07	6	21	F	3B	F1		5F	{ NOT USED }
08	7	22	G	3C	F2		60	ISO KEY
09	8	23	H	3D	F3		61	UNDO
0A	9	24	J	3E	F4		62	HELP
0B	0	25	K	3F	F5		63	KEYPAD (
0C	-	26	L	40	F6		64	KEYPAD /
0D	==	27	;	41	F7		65	KEYPAD *
0E	BS	28	'	42	F8		66	KEYPAD *
0F	TAB	29	`	43	F9		67	KEYPAD 7
10	Q	2A	(LEFT) SHIFT	44	F10	68	KEYPAD 8
11	W	2B	\	45	{ NOT USED }	69	KEYPAD 9
12	E	2C	Z	46	{ NOT USED }	6A	KEYPAD 4
13	R	2D	X	47	HOME		6B	KEYPAD 5
14	T	2E	C	48	UP ARROW	6C	KEYPAD 6
15	Y	2F	V	49	{ NOT USED }	6D	KEYPAD 1
16	U	30	B	4A	KEYPAD -	6E	KEYPAD 2
17	I	31	N	4B	LEFT ARROW	6F	KEYPAD 3
18	O	32	M	4C	{ NOT USED }	70	KEYPAD 0
19	P	33	,	4D	RIGHT ARROW	71	KEYPAD .
1A	[	34	.	4E	KEYPAD +	72	KEYPAD ENTER


Mouse & Joysticks buttons
==========================

Register DR2 is used to read mouse & joysticks buttons.
Left mouse button/joystick 0 fire is mapped to bit 2.
Right mouse button/joystick 1 fire is mapped to bit 1.
The bits are cleared when the buttons are pressed, and supposedly if the 
corresponding DDR bits are cleared.


Mouse & Joysticks directions
=============================

Register DR4 is also used to read mouse & joysticks directions, as shown
here:

Bit 0: XB & Up0
Bit 1: XA & Down0
Bit 2: YA & Left0
Bit 3: YB & Right0
Bit 4: Up1            NOT $10 = $EF
Bit 5: Down1          NOT $20 = $DF
Bit 6: Left1          NOT $40 = $BF
Bit 7: Right1         NOT $80 = $7F

XB, XA, YA, YB (mouse) are mapped on bits 4-7 if mouse is in port 1 

The corresponding bits in DDR4 are then set to input.

Bit 0 in DDR2 must be set, but it seems that to read the mouse, bit 0
of DR2 may be 0 (Froggies) or 1 (GEM). For the joystick, it seems to be set.

As the mouse ball rotates, two axes spin and cause the rotation
of a 0011 bit sequence in the hardware, two bits going to the 
registry when read. To emulate this, we rotate a $33333333 sequence and
send the last bits to register bits 0-1 for horizontal movement, 2-3
for vertical movement. 
It seems that at rest, '11' are sent, but disabling the mouse would somehow
change that value, as if something was happening in the hardware.
We rotate the sequence left for mouse moving to the left or up, right for 
right or down.

Joystick movements are a bit easier to emulate. When they're checked, set bit
 means no movement, a 0 indicates movement.

On the ST, moving the mouse when joystick moves were expected would trigger
endless movements, but plugging a joystick and taking control would fix the 
issue. IIRC.

ROM
====

A disassembly of the ROM is provided in this directory.
TODO: probe it and identify variables, routines
