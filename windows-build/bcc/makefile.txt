# you need to edit the following line to make them point to the right
# directories in your system

STEEMROOT = $(ROOT)\steem

# the following lines should apply to all systems
ASMINCOBJDIR = $(OUT)
INCDIR = $(ROOT)\include
ASMOBJDIR = $(OUT)
3RDPARTYROOT = $(ROOT)\3rdparty

# Note that we don't use unrarlib anymore. Borland linker is smart enough to 
# not include anything useless in the EXE, but we remove it from the project
# to avoid useless compile time.

#3RDPARTYOBJS = $(OUT)\div68kCycleAccurate.obj $(OUT)\dsp.obj $(OUT)\6301.obj $(OUT)\AviFile.obj
3RDPARTYOBJS = $(OUT)\div68kCycleAccurate.obj $(OUT)\dsp.obj $(OUT)\6301.obj
3RDPARTYOBJS = $(3RDPARTYOBJS) $(OUT)\AviFile.obj $(OUT)\ArchiveAccessSSE.obj

# Format: no space at all between paths in INCLUDEPATHS!!
INCLUDEPATHS = $(STEEMROOT)\code;$(BCCROOT)\Include;$(INCDIR);$(3RDPARTYROOT);
INCLUDEPATHS = $(INCLUDEPATHS)$(3RDPARTYROOT)\unrarlib;$(3RDPARTYROOT)\pasti;
INCLUDEPATHS = $(INCLUDEPATHS)$(3RDPARTYROOT)\6301;$(3RDPARTYROOT)\d3d

ALLOBJS = $(ASMOBJDIR)\asm_draw.obj $(OUT)\emu.obj c0w32.obj $(OUT)\Steem.obj $(ASMOBJS) $(OUT)\helper.obj
ALLOBJS = $(ALLOBJS) $(ASMOBJDIR)\asm_osd_draw.obj $(ASMINCOBJDIR)\asm_portio.obj
ALLOBJS = $(ALLOBJS) $(OUT)\SSE.obj $(OUT)\SSEOption.obj $(OUT)\SSEMMU.obj $(OUT)\SSE6301.obj $(OUT)\SSECpu.obj $(OUT)\SSEDebug.obj 
ALLOBJS = $(ALLOBJS) $(OUT)\SSEFrameReport.obj $(OUT)\SSEShifter.obj $(OUT)\SSESTF.obj $(OUT)\SSEVideo.obj $(OUT)\SSEGlue.obj
ALLOBJS = $(ALLOBJS) $(OUT)\SSEFloppy.obj $(OUT)\SSESTW.obj $(OUT)\SSEGhostDisk.obj 
ALLOBJS = $(ALLOBJS) $(OUT)\SSEWD1772.obj $(OUT)\SSEDrive.obj $(OUT)\SSEDisk.obj 
ALLOBJS = $(ALLOBJS) $(OUT)\SSEDma.obj $(OUT)\SSEYM2149.obj $(OUT)\SSEAcsi.obj
ALLOBJS = $(ALLOBJS) $(OUT)\SSECapsImg.obj $(OUT)\SSESCP.obj $(OUT)\SSEHfe.obj 

!ifndef ONEGAME

ALLOBJS = $(ALLOBJS) $(3RDPARTYOBJS)
NAME =Steem
RC_PATH = $(STEEMROOT)\rc\resource.rc

!else

NAME = $(ONEGAME_NAME)
RC_PATH = $(STEEMROOT)\rc\onegame\$(ONEGAME_NAME).rc

!endif

###################################################################
CPP        = $(BCCROOT)\Bin\bcc32
CPP32      = $(BCCROOT)\Bin\cpp32
LIBRARIAN  = $(BCCROOT)\Bin\tlib /P128
LINKER     = $(BCCROOT)\Bin\ilink32
RC         = $(BCCROOT)\Bin\brcc32

#    Set the linker options
LINKOPTS = -L$(BCCROOT)\Lib;$(BCCROOT)\Lib\PSDK -aa -Tpe -t -x -w -v- -C -Gn
##LINKOPTS = -L$(BCCROOT)\Lib;$(BCCROOT)\Lib\PSDK -aa -Tpe -t -x -w -C -Gn -Rr
#LINKOPTS = -L$(3RDPARTYROOT)\SDL-WIN\BccLib;-dSDL.DLL $(LINKOPTS)
LINKOPTS = -L$(3RDPARTYROOT)\UnRARDLL\bcclib;-dunrar.DLL $(LINKOPTS)
##LINKOPTS = -L$(3RDPARTYROOT)\UnRARDLL\bcclib $(LINKOPTS)
LINKOPTS = -L$(3RDPARTYROOT)\caps\bcclib;-dCAPSImg.DLL $(LINKOPTS)
##LINKOPTS = -L$(3RDPARTYROOT)\caps\bcclib $(LINKOPTS)
LINKOPTS = -L$(3RDPARTYROOT)\FreeImage\bcclib;-dFreeImage.DLL $(LINKOPTS)
##LINKOPTS = -L$(3RDPARTYROOT)\FreeImage\bcclib $(LINKOPTS)
#LINKOPTS = -L$(3RDPARTYROOT)\SDL-WIN\bcclib $(LINKOPTS)
LINKOPTS = -L$(3RDPARTYROOT)\d3d\bcc $(LINKOPTS)
#pragma comment(lib, "../../3rdparty/d3d/bcc/d3dx9_43.lib")
#LINKOPTS = -L$(BCCROOT)\..\DX_SDK_2010\ $(LINKOPTS)
#    Set the compiler options
STEEMFLAGS = -DBCC_BUILD -DWIN32 -DSTEVEN_SEAGAL
#STEEMFLAGS = -DBCC_BUILD -DWIN32
CCOPTS = -D_NO_VCL -DWINVER=0x0400 -D_WIN32_WINNT=0x0300
CCOPTS = -w  -O2 -OS -Oi -Ov -O -Oc -K-                  $(CCOPTS)
CCOPTS = -jb -j10 -tWM  -r -a4  -6  -vi -d -ff -fp       $(CCOPTS)
CCOPTS = -v- -x -xf -xp- -xd -xs- -H- -y- -X             $(CCOPTS)


!ifndef ONEGAME

OUTPUTDIR = $(OUT)

!ifdef DONT_ALLOW_DEBUG
CCOPTS = -DNO_DEBUG_BUILD                   $(CCOPTS)
OUTPUTDIR = $(OUT)
!endif

!ifdef FORCE_DEBUG_BUILD
CCOPTS = -DDEBUG_BUILD  -DSSE_DEBUG $(CCOPTS)
OUTPUTDIR = $(OUT)
!endif

!else

ONEGAME_IDX=0
!if $(ONEGAME_NAME)==nm1
ONEGAME_IDX=1
!elif $(ONEGAME_NAME)==nm2
ONEGAME_IDX=2
!elif $(ONEGAME_NAME)==aw1
ONEGAME_IDX=3
!elif $(ONEGAME_NAME)==aw2
ONEGAME_IDX=4
!elif $(ONEGAME_NAME)==sat1
ONEGAME_IDX=5
!elif $(ONEGAME_NAME)==sat2
ONEGAME_IDX=6
!endif

CCOPTS = -DOG_NM1_IDX=1;OG_NM2_IDX=2;OG_AW1_IDX=3        $(CCOPTS)
CCOPTS = -DOG_AW2_IDX=4;OG_SAT1_IDX=5;OG_SAT2_IDX=6      $(CCOPTS)
CCOPTS = -DONEGAME;ONEGAME_NAME="\"$(ONEGAME_NAME)\""    $(CCOPTS)
CCOPTS = -DONEGAME_IDX=$(ONEGAME_IDX)                    $(CCOPTS)
OUTPUTDIR = $(ONEGAME_PATH)

!endif

#!ifdef BCC_BUILD
CCOPTS = -DBCC_BUILD                                     $(CCOPTS)
#!endif

CPPFLAGS= -I$(INCLUDEPATHS) $(CCOPTS)

######################################################################################
######################################################################################
######################################################################################

ALL: Steem.res Steem.obj helper.obj emu.obj SSE.obj SSEOption.obj \
  SSEMMU.obj SSE6301.obj SSECpu.obj SSEDebug.obj SSEFloppy.obj \
  SSEFrameReport.obj SSEShifter.obj SSESTF.obj SSEVideo.obj \
  SSESTW.obj SSEGhostDisk.obj SSEWD1772.obj SSEDrive.obj \
  SSEDma.obj SSEDisk.obj SSEYM2149.obj SSEGlue.obj \
  SSECapsImg.obj SSESCP.obj SSEHfe.obj SSEAcsi.obj link

link:
           $(LINKER) $(LINKOPTS) $(ALLOBJS), "$(OUTPUTDIR)\$(NAME).exe", ,import32.lib cw32mt.lib, ,$(OUT)\Steem.res


Steem.res:
           $(RC) $(RC_PATH) -fo$(OUT)\Steem.res

Steem.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\Steem.obj $(STEEMROOT)\Steem.cpp

helper.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\helper.obj $(STEEMROOT)\helper.cpp

emu.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\emu.obj $(STEEMROOT)\emu.cpp

SSE.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSE.obj $(STEEMROOT)\code\SSE\SSE.cpp

SSEOption.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEOption.obj $(STEEMROOT)\code\SSE\SSEOption.cpp

SSEMMU.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEMMU.obj $(STEEMROOT)\code\SSE\SSEMMU.cpp

SSE6301.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSE6301.obj $(STEEMROOT)\code\SSE\SSE6301.cpp

SSECpu.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSECpu.obj $(STEEMROOT)\code\SSE\SSECpu.cpp

SSEDebug.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEDebug.obj $(STEEMROOT)\code\SSE\SSEDebug.cpp

SSEFloppy.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEFloppy.obj $(STEEMROOT)\code\SSE\SSEFloppy.cpp

SSESTF.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSESTF.obj $(STEEMROOT)\code\SSE\SSESTF.cpp

SSEVideo.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEVideo.obj $(STEEMROOT)\code\SSE\SSEVideo.cpp

SSEFrameReport.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEFrameReport.obj $(STEEMROOT)\code\SSE\SSEFrameReport.cpp

SSEShifter.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEShifter.obj $(STEEMROOT)\code\SSE\SSEShifter.cpp

SSEGhostDisk.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEGhostDisk.obj $(STEEMROOT)\code\SSE\SSEGhostDisk.cpp

SSESTW.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSESTW.obj $(STEEMROOT)\code\SSE\SSESTW.cpp

SSEWD1772.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEWD1772.obj $(STEEMROOT)\code\SSE\SSEWD1772.cpp

SSEDma.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEDma.obj $(STEEMROOT)\code\SSE\SSEDma.cpp

SSEDrive.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEDrive.obj $(STEEMROOT)\code\SSE\SSEDrive.cpp

SSEDisk.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEDisk.obj $(STEEMROOT)\code\SSE\SSEDisk.cpp

SSEYM2149.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEYM2149.obj $(STEEMROOT)\code\SSE\SSEYM2149.cpp

SSECapsImg.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSECapsImg.obj $(STEEMROOT)\code\SSE\SSECapsImg.cpp

SSEGlue.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEGlue.obj $(STEEMROOT)\code\SSE\SSEGlue.cpp

SSESCP.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSESCP.obj $(STEEMROOT)\code\SSE\SSESCP.cpp

SSEHfe.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEHfe.obj $(STEEMROOT)\code\SSE\SSEHfe.cpp

SSEAcsi.obj:
           $(CPP) $(CPPFLAGS) $(STEEMFLAGS) -c -o$(OUT)\SSEAcsi.obj $(STEEMROOT)\code\SSE\SSEAcsi.cpp

SSE:	SSE.obj SSEOption.obj SSEMMU.obj SSE6301.obj SSECpu.obj SSEDebug.obj \
  SSEFloppy.obj SSEFrameReport.obj SSEShifter.obj SSESTF.obj SSEVideo.obj \
  SSESTW.obj SSEGhostDisk.obj SSEWD1772.obj SSEDrive.obj \
  SSEDma.obj SSEDisk.obj SSEYM2149.obj SSEGlue.obj \
  SSECapsImg.obj SSESCP.obj SSEHfe.obj SSEAcsi.obj

#3rdparty:	unrarlib div68kCycleAccurate dsp 6301

3rdparty:	div68kCycleAccurate dsp 6301 AviFile ArchiveAccessSSE


ArchiveAccessSSE:
        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\ArchiveAccessSSE.obj $(3RDPARTYROOT)\ArchiveAccess\ArchiveAccess\ArchiveAccessSSE.cpp $(CFLAGS) 

#unrarlib:
#	$(CPP) $(CPPFLAGS) -DWIN32 -c -o$(OUT)\unrarlib.obj $(3RDPARTYROOT)\unrarlib\unrarlib\unrarlib.c $(CFLAGS) 
div68kCycleAccurate:
        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\div68kCycleAccurate.obj $(3RDPARTYROOT)\pasti\div68kCycleAccurate.c $(CFLAGS) 
dsp:
        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\dsp.obj $(3RDPARTYROOT)\dsp\dsp.cpp
6301:
        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\6301.obj $(3RDPARTYROOT)\6301\6301.c $(CFLAGS) 
#CapsPlug:
#        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\CapsPlug.obj $(3RDPARTYROOT)\caps\CapsPlug.cpp

AviFile:
        $(CPP) $(CPPFLAGS) -DWIN32 -DSTEVEN_SEAGAL -c -o$(OUT)\AviFile.obj $(3RDPARTYROOT)\avi\AviFile.cpp

