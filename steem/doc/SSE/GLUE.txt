GLUE
======

Sources:

Overscan Techniques by Alien/ST-Connexion translated by Frost/Sector One
Various discussions at www.atari-forum.com, especially contributions by
Dio, ijor (Jorge Cwik), ljbk (Paolo), Troed/Sync.
Some general Atari ST documentation
Various doc
Development of Steem
Hatari source


Introduction
==============

As the name suggests, this IC glues the system together. It is responsible for 
address decoding and providing chip select lines. 
It also handles the control of interrupt lines to the CPU, and bus arbitration 
between CPU and DMA. It also creates the video timing signals.


Registers
===========

$FFFF820A   R/W             |------xx|   Sync Mode
                                   ||
                                   | ----   External/_Internal Sync
                                    -----   50 Hz/_60 Hz Field Rate

Alien:
    Bit 1 corresponds to the monitor refresh rate (0 for 60Hz, 1 for 50 Hz).
We'll call this register SYNC.

(SYNC&2)==0  (and MODE<2) <-->  Frequency==60Hz
(SYNC&2)==2  (and MODE<2) <-->  Frequency==50Hz


$FFFF8260   R/W             |------xx|   Shift Mode
                                   ||
                                   00       320 x 200, 4 Plane
                                   01       640 x 200, 2 Plane
                                   10       640 x 400, 1 Plane
                                   11       Reserved
Alien:
    Both the GLUE and the SHIFTER have a copy of this register.
    This byte can have  one of 3 values:  0 for low-,  1 for middle- and  2 for
    high-resolution.  The GLUE needs this register,  because in high-resolution
    the picture is displayed at ~70 Hz which requires different synchronization
    signal.

We'll call this register MODE.

Internal counters
-------------------

WORD   HCTR   position in HBL

WORD   VCTR   HBL#
The vertical counter is  incremented every line, i.e.  at every edge of  the HBL
signal, and reset on each edge of the VBL.




Signals
=========

Alien:
  The GLUE: Produces the vertical and  horizontal synchronization signals.  It
   also produces signals telling the SHIFTER  when it should display the useable
   screen   and  when it should show the background  colour 0  (corresponding to
   the border).
SS: Not sure about that, seeing the traces of Dio, DE starts before image can be
    displayed and stops while it's still being displayed.
Alien:
   It also tells the MMU when to send data to the SHIFTER.


The GLUE generates the DE, Vsync, Hsync and Blank signals:

- The DE (Display Enable) signal  tells the  SHIFTER when to display the  border
  and when it has to display the  usable screen.  It also tells the MMU  when to
  send data to the SHIFTER:  It is unnecessary  to send  data and  increment the
  video counter  while the  border is  displayed.  If you cut the track  of this
  signal you will obtain a  "hardware" overscan (thanks to Aragorn who confirmed
  this by doing it). However, due to stability issues, this is  not recommended.
  The Autoswitch Overscan board (see ST Magazine 50) works in a very similar way
  by controlling this signal.

  DE is on when two internal signals are on: V (for vertical) and H (for
  horizontal).

- The Blank signal forces the  RGB colour outputs to zero  just before,  during,
  and just after the Hsync and Vsync synchronization signals.  Indeed,  monitors
  require the video signal  to be 0 volts  (black colour) before  every synchro-
  nization pulse (implemented as a negative voltage): Even the border colour has
  to be eliminated to prevent overlaying the border colour over the screen while
  the electron beam returns to the beginning of the next line (from the screen's
  right to its left)  and to the next picture  (from the screen's bottom  to its
  top).  Note that the Blank signal isn't used if the screen is displaying high-
  resolution.

The Vsync and Hsync sync signals are added to the video signal:

- Vsync is the  vertical synchronization signal which specifies where the top of
  the picture is located  in the video stream.  The VBL interrupt corresponds to
  an edge of this signal.

- Hsync is the horizontal synchronization signal. It generates the HBL interrupt
  (vector $68).  The HBL interrupt  should not be confused  with the Timer B
  interrupt (vector $120)  which is generated  when the DE signal goes low on an
  input of the MFP:  The Timer B interrupt is triggered  only,  when the useable
  screen is displayed, because DE is inactive during upper and lower border.

Knowing that  the GLUE  handles these signals,  it  seems logical  that it would
control the process of displaying the  screen. To do this, it would  require two
counters:

- a vertical counter:   the number of currenly displayed line

- a horizontal counter: the position within the line currently being output


Bus
=====

Dio:

There's two data buses in the ST, the CPU bus and the DRAM / Shifter bus. 
The two are bridged by a bus gateway - a buffer and a latch, controlled by 
RDAT, WDAT and LATCH on the MMU.

The DRAM bus is segmented by MMU into two phases each of two 8MHz cycles,
 one of which is a CPU phase and the other of which is a video / refresh
 (and sound on the STE) phase. If the CPU tries to access DRAM or the Shifter
 on a video phase, DTACK is withheld for two clock cycles to insert a pair of
 wait states and align the access onto the CPU phase. But anything only on 
the CPU bus (including Glue and the MMU itself, at least in the STFM) can 
be accessed on any phase.


In the STE, GLUE and Shifter are one chip. (?)


Pseudo-code
=============

The GLUE compares its internal variables with some tables to make decisions
regarding the signals. This must go very fast so it's a simple hardware
implementation. 
The pseudo-code should allow to derive all shifter tricks.
This is based on efforts by Alien and Troed.

(TODO precise timings of vsync on/off)

VERTICAL_LOOP:

VCTR=0
REPEAT
  IF VCTR =  34 AND ( (SYNC&2)==0 OR MODE==2  ) THEN V=TRUE
  IF VCTR =  63 AND (SYNC&2)==2 AND MODE<>2 THEN V=TRUE
  IF VCTR = 234 AND (SYNC&2)==0 AND MODE<>2 THEN V=FALSE
  IF VCTR = 263 AND (SYNC&2)==2 AND MODE<>2 THEN V=FALSE
  IF VCTR = 263 AND (SYNC&2)==0 AND MODE<>2 THEN VSYNC,VCTR=0
  IF VCTR = 313 AND (SYNC&2)==2 AND MODE<>2 THEN VSYNC,VCTR=0
  IF VCTR = 500 AND MODE=2 THEN VSYNC,VCTR=0
  DO HORIZONTAL_LOOP
END_REPEAT

HORIZONTAL_LOOP:

(STF)

 HCTR=0
REPEAT
006 IF HCTR = 1 and MODE=2 THEN H=TRUE
028 IF HCTR = 7 AND (SYNC&2)=0 AND MODE<>2 THEN HBLANK=FALSE
032 IF HCTR = 8 AND (SYNC&2)=2 AND MODE<>2 THEN HBLANK=FALSE
052 IF HCTR = 13  AND (SYNC&2)=0 AND MODE<>2 AND HBLANK=FALSE THEN H=TRUE
054 IF HCTR = 13  AND (SYNC&2)=0 THEN LAST=127
054 IF HCTR = 13  AND (SYNC&2)=2 THEN LAST=128
056 IF HCTR = 14  AND (SYNC&2)=2 AND MODE<>2 AND HBLANK=FALSE THEN H=TRUE
164 IF HCTR = 41  AND MODE=2 THEN H=FALSE
180 IF HCTR = 45 AND MODE=2 THEN HSYNC=TRUE
204 IF HCTR = 51 AND MODE=2 THEN HSYNC=FALSE
224 IF HCTR = 56 AND MODE=2 THEN GOTO FINISHED
372 IF HCTR = 93  AND (SYNC&2)=0  THEN H=FALSE
376 IF HCTR = 94  AND (SYNC&2)=2  THEN H=FALSE
448 IF HCTR = 112 AND (SYNC&2)=0 AND MODE<>2 THEN HBLANK=TRUE
452 IF HCTR = 113 AND (SYNC&2)=2 AND MODE<>2 THEN HBLANK=TRUE
460 IF HCTR = 115 AND (SYNC&2)=0 AND MODE<>2 THEN HSYNC=TRUE, H=FALSE
464 IF HCTR = 116 AND (SYNC&2)=2 AND MODE<>2 THEN HSYNC=TRUE, H=FALSE
500 IF HCTR = 125 AND (SYNC&2)=0 AND MODE<>2 THEN HSYNC=FALSE, VCTR++
504 IF HCTR = 126 AND (SYNC&2)=2 AND MODE<>2 THEN HSYNC=FALSE, VCTR++
508 IF HCTR = LAST THEN GOTO FINISHED
512 IF HCTR = LAST THEN GOTO FINISHED
 HCTR++ 
END_REPEAT [CPU gets the bus for next 2 cycles]
FINISHED:
 

(STE)

 HCTR=0
REPEAT
002 IF HCTR = 0 and MODE=2 THEN H=TRUE
028 IF HCTR = 7 AND (SYNC&2)=0 AND MODE<>2 THEN HBLANK=FALSE
032 IF HCTR = 8 AND (SYNC&2)=2 AND MODE<>2 THEN HBLANK=FALSE
036 IF HCTR = 9  AND (SYNC&2)=0 AND MODE<>2 AND HBLANK=FALSE THEN H=TRUE
040 IF HCTR = 10  AND (SYNC&2)=2 AND MODE<>2 AND HBLANK=FALSE THEN H=TRUE
054 IF HCTR = 13  AND (SYNC&2)=0 THEN LAST=127
054 IF HCTR = 13  AND (SYNC&2)=2 THEN LAST=128
164 IF HCTR = 41  AND MODE=2 THEN H=FALSE
180 IF HCTR = 44 AND MODE=2 THEN HSYNC=TRUE
204 IF HCTR = 50 AND MODE=2 THEN HSYNC=FALSE
224 IF HCTR = 56 AND MODE=2 THEN GOTO FINISHED
372 IF HCTR = 93  AND (SYNC&2)=0 AND MODE<>2  THEN H=FALSE
376 IF HCTR = 94  AND (SYNC&2)=2 AND MODE<>2 THEN H=FALSE
448 IF HCTR = 111 AND (SYNC&2)=0 AND MODE<>2 THEN HBLANK=TRUE
452 IF HCTR = 112 AND (SYNC&2)=2 AND MODE<>2 THEN HBLANK=TRUE
460 IF HCTR = 114  AND (SYNC&2)=0 AND MODE<>2 THEN HSYNC=TRUE, H=FALSE
464 IF HCTR = 115 AND (SYNC&2)=2  AND MODE<>2 THEN HSYNC=TRUE, H=FALSE
496 IF HCTR = 124 AND (SYNC&2)=0 AND MODE<>2 THEN HSYNC=FALSE, VCTR++
500 IF HCTR = 125 AND (SYNC&2)=2 AND MODE<>2 THEN HSYNC=FALSE, VCTR++
508 IF HCTR = LAST THEN GOTO FINISHED
512 IF HCTR = LAST THEN GOTO FINISHED
 HCTR++
END_REPEAT
FINISHED:



Notes:

- We ignore older GLUE where 50Hz frames started 16 lines before.

- HCTR*4=emulator cycles. Of course, the hardware doesn't count in cycles.

- Constantly: DE = H AND V.

- The 'right border off' shifter trick grants 44 extra bytes. This means
that displays goes on from cycle 376 to cycle 376+44*2=464. This is the
cycle of HSync, not of HBlank. The trick grants 44 bytes also in a 60hz
line, which implies that HBlank and HSync happen 4 cycles earlier, and
this seems logical enough.
Those timings are the same on a STE.

- DE starts earlier on STE because of the horizontal scrolling capacity,
according to this table:

    Mode  Pixels Bytes  Cycles
      0       16     8      16
      1       16     4       8
      2       16     2       4

- The cycles when the tests occur need to be modified according to wake-up 
state, according to this table:

  DL Latency       WU             WS       MODE    SYNC
     (Dio)        (ijor)        (LJBK)
-----------------------------------------------------------
        3           2 (warm)       2        +2     +2  
        4           2              4               +2
        5           1 (cold)       3  
        6           1              1        -2















