This file contains specific info that is necessary to implement a 6301 keyboard
chip (IKBD) emulation in an Atari ST emulation (spoiler alert!)
It is mainly based on the official doc for the MC6500 and the HD6301 by
Motorola and Hitachi, the indispensable doc by Stephane Catala - Belzebub 
/ ST Connexion, STMagazine No 53 - 55, and on the translation by Tobe, 
with some minor (gasp) corrections and additions by Steven Seagal.
===============================================================================

Interesting ST cases
=====================

Barbarian
Cobra Compil 1
Dragonnels (Menu, Unlimited Bobs, Great Plazma)
Froggies over the Fence (Menu)
Gauntlet
GEM
Jumping Jackson (Automation 239)
Lethal Xcess
Manchester United
NEOchrome
Sentinel
Transbeauce 2 (Menu)

Internal Registers
===================

Internal registers can be accessed by the program, but some are read-only,
some are write-only. When reading a write-only register, one gets all bits
set ($FF). The DDR registers are write-only. Themselves determine which bits
of DR registers are read-only and which are write-only. If the bit is set in
the DDR, then the corresponding bit in DR is read-only (input).
In Sim6xx, they're identified with iram[].
It's very possible that the documentation be inaccurate WRT R/W possibilities
of registers or bits.



==============================================================================
  * Data Registers
------------------------------------------------------------------------------
$0000    | B | DDR1  | Direction Data Register 1                      | WO
$0001    | B | DDR2  | Direction Data Register 2                      | WO
$0002    | B | DR1   | Data Register 1                                | RW
$0003    | B | DR2   | Data Register 2                                | RW
$0004    | B | DDR3  | Direction Data Register 3                      | WO
$0005    | B | DDR4  | Direction Data Register 4                      | WO
$0006    | B | DR3   | Data Register 3                                | RW
$0007    | B | DR4   | Data Register 4                                | RW
------------------------------------------------------------------------------
  * 16bit Timer
------------------------------------------------------------------------------
$0008    | B | TCSR  | Timer Control/Status Register                  | RW
$0009-A  | W | FRC   | Free Running Counter                           | RO
$000B-C  | W | OCR   | Output Compare Register                        | RW
$000D-E  | W | ICR   | Input Capture Register                         | RO
------------------------------------------------------------------------------
$000F    | B | CSR   | Unused Control/Status Register for DR3 SC1/SC2 |
------------------------------------------------------------------------------
  * Serial Communication Interface
------------------------------------------------------------------------------
$0010    | B | RMCR  | Rate & Mode Control Register                   |RW (WO?)
$0011    | B | TRCSR | Transmit/Receive Control & Status Register     | RW
$0012    | B | RDR   | Receive Data Register                          | RO
$0013    | B | TDR   | Transmit Data Register                         | WO
------------------------------------------------------------------------------
  * RAM Control
------------------------------------------------------------------------------
$0014    | B | RCR   | RAM Control Register                           | RW
------------------------------------------------------------------------------


TRCSR ($11)
-----------

This register controls the communications.
In Sim6xx, there are defines for each bit (WU, etc.).
-Bit 0 (RW) : Wake Up (WU 0x01)
  ! WU set means "stand-by", not "awake".
  It is set by software and cleared by hardware (though it's RW).
  When the chip is in stand-by mode, a series of ten '1' bits will awake it.
  It seems that a working but not transmitting serial line does just that.
  Cases: Froggies leaving menu, Barbarian (hack in Steem gets more 
  mysterious...)
-Bit 1 (RW) : Transmit Enable (TE 0x02)
-Bit 2 (RW) : Transmit Interrupt Enable (TIE 0x04)
-Bit 3 (RW) : Receive Enable (RE 0x08)
  This bit is never cleared by the ROM in the ST.
-Bit 4 (RW) : Receive Interrupt Enable (RIE 0x10)
-Bit 5 (RO?) : Transmit Data Register Empty (TDRE 0x20)
  This bit is set when a byte has been sent, and is cleared by when TRCSR is 
  read then TDR is written, according to doc. 
  According to Hitachi doc, bit 5 (TDRE) is read-only, but the ROM wants to set
  it (writing $3A, $3E). This would trigger an interrupt as soon as they're 
  enabled ($3E would force an interrupt, in the ROM several conditions are 
  then checked).
  It may explain how some program operate (Cobra Compil 1).
-Bit 6 (RO) : Overrun or Framing Error (ORFE 0x40)
  Set when a byte is received if the previous byte was not read, cleared when 
  TRCSR then RDR are read.
  When a byte is received while the previous byte hasn't been read, the overrun
  flag is set by the hardware, it's cleared at next read. 
  The ROM sets the chip in stand-by mode when it detects an overrun. 
  This must be emulated because it does happen with some programs. 
  Fascinatingly, if you fail to emulate this Barbarian will be stuck, but for
  a totally different reason as in fake emulation ("Psygnosys hack").
-Bit 7 (RO?) : Receive Data Register Full (RDRF 0x80)
  Set when a byte was received, cleared when TRSCR then RDR are read

The read-only bits are set and cleared by the hardware (or the emulation).
It seems the ROM tries to clear bit 7:
f990	71 ef 11	aim ef11			;TRCSR clear bit7 RDRF
fcfe	71 ef 11	aim ef11




Speed, timings
===============

[Steem SSE 3.4]
The 6301 runs at 1Mhz, the M68000 at 8Mhz. The most practical way to integrate
both emulations is to run 1/8 CPU cycles every scanline.

Computing a theoretical #cycles for transmitting a byte:
7812.5 bit/s
976.5625 bytes/s
1 s = 1M 6301 cycles
976.5625 bytes in 1M cycles
1 byte in 1000000/976.5625 cycles = 1024 cycles

Value that works in the ST (esp. for loading a custom program): 1350 cycles
Lower values would work, but not with Froggies.

A problem of 6301 emulation is that the ST program didn't have a "ready" 
message.
By sending commands too fast, you could mess it up, likewise in emulation if
your timings are off.


Double-buffering
=================

According to their doc, both the ACIA and the 6301 use double-buffering, which 
allows to have one value in the shift register (value being transmitted/
received) and another value in the I/O register.
A concrete implication is that you can write the first two bytes in a very 
short delay, and of course read a byte while another is being shifted.
Another is that if you write two bytes in quick succession, the second will
replace the first only if the shift register is busy.
Not sure it makes a difference, but it's implemented in Steem (optional 
#define). Sort of, as the 3rd party code we use didn't plan that.



DR registers in input mode
===========================

Those registers are handled in ireg.c in Sim6xx.

When you read DR registers, you really are checking the hardware. Those 
registers must reflect the situation of the hardware, not a static value in 
memory. For emulation, you may update the values at time of event, or when
the register is read.


Keyboard
=========

To read the keyboard, one uses DR1, DR3 & DR4 and their associated direction
registers DDR1, DDR3 & DDR4.
Bits 1-7 of DR3 are mapped to the first seven keyboard's matrix columns
(see keyboard table), and all bits of DR4 may be mapped to the remaining ones.
DR1 is mapped to the rows of the matrix.
DR1 is set in input mode (DDR1 0), DR3 & DR4 in ouput mode (DDR3, 4 FF), but
maybe we must consider bit by bit.

All bits of DR1 that are cleared in DDR1 (meaning input) are set. 
But if a key is pressed in the corresponding row (see table), and the bit in 
DDR3 or DDR4 corresponding to the column is set, and the corresponding 
bit in DR3 or DR4 is set (and not cleared like the doc states), the bit in DR1
 is cleared.
It seems rather complicated, but it's not hard to emulate. 

This precious table indicates how the keys change the state of registers.
The first row is shifted to the right compared with table by Tobe (from the
one in ST Magazine). 
Decimal numbers have been converted to more common hexadecimal.
The hex codes are the scancodes that will be returned by the 6301 program.
We have this funny situation where we send a scancode to the emulator, so that
it knows which registers to change to have the program send the very same 
scancode!

  //               DR3                |                  DR4                  |
  //  1 |  2 |  3 |  4 |  5 |  6 |  7 |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |
  //  FD   FB   F7   EF   DF   BF   7F   FE   FD   FB   F7   EF   DF   BF   7F
  // 002  004  008  010  020  040  080  001  002  004  008  010  020  040  080
  //  0    1    2    3    4    5    6    7    8    9   10   11   12   13   14
  ///////////////////////////////////////////////////////////////////////////// DR1
  {0x00,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x62,0x61,0x63,0x65},// 0
  {0x00,0x00,0x00,0x00,0x01,0x03,0x05,0x07,0x09,0x0B,0x0D,0x0E,0x48,0x64,0x66},// 1
  {0x00,0x00,0x00,0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x29,0x53,0x47,0x67,0x69},// 2
  {0x00,0x00,0x00,0x00,0x0F,0x11,0x13,0x15,0x16,0x18,0x1A,0x52,0x4B,0x68,0x4A},// 3
  {0x1D,0x00,0x00,0x00,0x10,0x12,0x14,0x22,0x17,0x19,0x1B,0x2B,0x50,0x6A,0x6C},// 4
  {0x00,0x2A,0x00,0x00,0x1E,0x1F,0x21,0x23,0x24,0x26,0x27,0x1C,0x4D,0x6B,0x4E},// 5
  {0x00,0x00,0x38,0x00,0x60,0x20,0x2E,0x30,0x25,0x33,0x34,0x28,0x6D,0x6E,0x6F},// 6
  {0x00,0x00,0x00,0x36,0x2C,0x2D,0x2F,0x31,0x32,0x39,0x3A,0x35,0x70,0x71,0x72} // 7

Here is a widely available, but not with those nice columns, table of 
scancodes/keys.

01	Esc	1B	]	35	/		4F	{ NOT USED }
02	1	1C	RET	36	(RIGHT) SHIFT	50	DOWN ARROW
03	2	1D	CTRL	37	{ NOT USED }	51	{ NOT USED }
04	3	1E	A	38	ALT		52	INSERT
05	4	1F	S	39	SPACE BAR	53	DEL
06	5	20	D	3A	CAPS LOCK	54	{ NOT USED }
07	6	21	F	3B	F1		5F	{ NOT USED }
08	7	22	G	3C	F2		60	ISO KEY
09	8	23	H	3D	F3		61	UNDO
0A	9	24	J	3E	F4		62	HELP
0B	0	25	K	3F	F5		63	KEYPAD (
0C	-	26	L	40	F6		64	KEYPAD /
0D	==	27	;	41	F7		65	KEYPAD *
0E	BS	28	'	42	F8		66	KEYPAD *
0F	TAB	29	`	43	F9		67	KEYPAD 7
10	Q	2A	(LEFT) SHIFT	44	F10	68	KEYPAD 8
11	W	2B	\	45	{ NOT USED }	69	KEYPAD 9
12	E	2C	Z	46	{ NOT USED }	6A	KEYPAD 4
13	R	2D	X	47	HOME		6B	KEYPAD 5
14	T	2E	C	48	UP ARROW	6C	KEYPAD 6
15	Y	2F	V	49	{ NOT USED }	6D	KEYPAD 1
16	U	30	B	4A	KEYPAD -	6E	KEYPAD 2
17	I	31	N	4B	LEFT ARROW	6F	KEYPAD 3
18	O	32	M	4C	{ NOT USED }	70	KEYPAD 0
19	P	33	,	4D	RIGHT ARROW	71	KEYPAD .
1A	[	34	.	4E	KEYPAD +	72	KEYPAD ENTER


The table can also be found in the ROM ($F319->$F370 + special keys),
each column following the other from #4 on ($3E,$1,$2,$F,...).

f206	1d 2a 38 36: shift etc.
...  
f2f3	80 01 00 02 ce f3 11 d6 8a c1 05 25 0d c0  ...........%..
f301	04 58 58 58 3a 5f 20 01 5c 44 24 fc 3a a6  .XXX:_ .\D$.:.
f30f	00 39 00 00 3b 3c 3d 00 00 00 3e 01 02 0f  .9..;<=...>...
f31d	10 1e 60 2c 3f 03 04 11 12 1f 20 2d 40 05  ..`,?..... -@.
f32b	06 13 14 21 2e 2f 41 07 08 15 22 23 30 31  ...!./A..."#01
f339	42 09 0a 16 17 24 25 32 43 0b 0c 18 19 26  B....$%2C....&
f347	33 39 44 0d 29 1a 1b 27 34 3a 62 0e 53 52  39D.)..'4:b.SR
f355	2b 1c 28 35 61 48 47 4b 50 4d 6d 70 63 64  +.(5aHGKPMmpcd
f363	67 68 6a 6b 6e 71 65 66 69 4a 6c 4e 6f 72  ghjknqefiJlNor

Steem v3.7 uses the rom to spare some memory.


Mouse & Joysticks buttons
==========================

Register DR2 is used to read mouse & joysticks buttons.
Left mouse button/joystick 0 fire is mapped to bit 2.
Right mouse button/joystick 1 fire is mapped to bit 1.
The bits are cleared when the buttons are pressed, and supposedly if the 
corresponding DDR bits are cleared.


Mouse & Joysticks directions
=============================

Register DR4 is also used to read mouse & joysticks directions, as shown
here:

Bit 0: XB & Up0
Bit 1: XA & Down0
Bit 2: YA & Left0
Bit 3: YB & Right0
Bit 4: Up1            NOT $10 = $EF
Bit 5: Down1          NOT $20 = $DF
Bit 6: Left1          NOT $40 = $BF
Bit 7: Right1         NOT $80 = $7F

XB, XA, YA, YB (mouse) are mapped on bits 4-7 if mouse is in port 1 

The corresponding bits in DDR4 are then set to input.

Bit 0 in DDR2 must be set, but it seems that to read the mouse, bit 0
of DR2 may be 0 (Froggies) or 1 (GEM). For the joystick, it seems to be set.

As the mouse ball rotates, two axes spin and cause the rotation
of a 0011 bit sequence in the hardware, two bits going to the 
registry when read. To emulate this, we rotate a $CCCCCCCC sequence and
send the last bits to register bits 0-1 for horizontal movement, 2-3
for vertical movement. 
It seems that at rest, '00' are sent.

We rotate the sequence left for mouse moving to the left or up, right for 
right or down.

Joystick movements are a bit easier to emulate. When they're checked, set bit
 means no movement, a 0 indicates movement.

This explains the oddity of 'Jumping Jackson Auto239'.
The DISABLE MOUSE command causes a last reading of the mouse (jump to RESUME
in the rom), which is sent by the 6301 to the CPU as a joystick event, 
because '0' means movement for the joystick.
Without emulating that, the game switches to a buggy black screen.

Note:
mouse 400 pixels = 5 rotations
wheel : 20 ticks
4 sensors

4x20x5=400: vertical pixels of mono



On the ST, moving the mouse when joystick moves were expected would trigger
endless movements, but plugging a joystick and taking control would fix the 
issue. IIRC.

ROM
====

A disassembly of the ROM is provided in this directory.
Since v3.6, there's also a commented listing, and a RAM map.
A 6301 browser in the boiler gives the RAM too.



6301 INSTRUCTION SET SUMMARY (table from Tobe, with some additions)
==============================================================================

 REGISTERS & MEMORY INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|CLR |   |   |   |   | 6F| 7F|..0100| M=0                                    |
|CLRA| 4F|   |   |   |   |   |..0100| A=0                                    |
|CLRB| 5F|   |   |   |   |   |..0100| B=0                                    |
|LDAA|   |   | 86| 96| A6| B6|..**0.| A=M                                    |
|LDAB|   |   | C6| D6| E6| F6|..**0.| B=M                                    |
|LDD |   |   | CC| DC| EC| FC|..**0.| D=MM                                   |
|LDS |   |   | 8E| 9E| AE| BE|..**0.| S=MM                                   |
|LDX |   |   | CE| DE| EE| FE|..**0.| X=MM                                   |
|PSHA| 36|   |   |   |   |   |......| (SP)=A,SP-                             |
|PSHB| 37|   |   |   |   |   |......| (SP)=B,SP-                             |
|PSHX| 3C|   |   |   |   |   |......| (SP)=X,SP-                             |
|PULA| 36|   |   |   |   |   |......| SP+,A=(SP)                             |
|PULB| 37|   |   |   |   |   |......| SP+,B=(SP)                             |
|PULX| 38|   |   |   |   |   |......| SP+,X=(SP)                             |
|STAA|   |   |   | 97| A7| B7|..**0.| M=A                                    |
|STAB|   |   |   | D7| E7| F7|..**0.| M=B                                    |
|STD |   |   |   | DD| ED| FD|..**0.| MM=D                                   |
|STS |   |   |   | 9F| AF| BF|..**0.| MM=S                                   |
|STX |   |   |   | DF| EF| FF|..**0.| MM=X                                   |
|TAB | 16|   |   |   |   |   |..**0.| B=A                                    |
|TAP | 06|   |   |   |   |   |******| S=A                                    |
|TBA | 17|   |   |   |   |   |..**0.| A=B                                    |
|TPA | 07|   |   |   |   |   |......| A=S                                    |
+----+---+---+---+---+---+---+------+----------------------------------------+

 ARITHMETIC INSTRUCTIONS                                                                                                              |
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|ABA | 1B|   |   |   |   |   |*.****| B=B+A                                  |
|ABX | 3A|   |   |   |   |   |......| X=X+B (B unsigned)                     |
|ADCA|   |   | 89| 99| A9| B9|*.****| A=A+M+C                                |
|ADCB|   |   | C9| D9| E9| F9|*.****| B=B+M+C                                |
|ADDA|   |   | 8B| 9B| AB| BB|*.****| A=A+M                                  |
|ADDB|   |   | CB| DB| EB| FB|*.****| B=B+M                                  |
|ADDD|   |   | C3| D3| E3| F3|..****| D=D+MM                                 |
|DAA | 19|   |   |   |   |   |..****| A=BCD(A)                               |
|DEC |   |   |   |   | 6A| 7A|..***.| M=M-1                                  |
|DECA| 4A|   |   |   |   |   |..***.| A=A-1                                  |
|DECB| 5A|   |   |   |   |   |..***.| B=B-1                                  |
|DES | 34|   |   |   |   |   |......| S=S-1                                  |
|DEX | 09|   |   |   |   |   |...*..| X=X-1                                  |
|INC |   |   |   |   | 6C| 7C|..***.| M=M+1                                  |
|INCA| 4C|   |   |   |   |   |..***.| A=A+1                                  |
|INCB| 5C|   |   |   |   |   |..***.| B=B+1                                  |
|INS | 31|   |   |   |   |   |......| S=S+1                                  |
|INX | 08|   |   |   |   |   |...*..| X=X+1                                  |
|MUL | 3D|   |   |   |   |   |.....*| D=A*B                                  |
|NEG |   |   |   |   | 60| 70|..****| M=-M                                   |
|NEGA| 40|   |   |   |   |   |..****| A=-A                                   |
|NEGB| 50|   |   |   |   |   |..****| B=-B                                   |
|SBA | 10|   |   |   |   |   |..****| A=A-B                                  |
|SBCA|   |   | 82| 92| A2| B2|..****| A=A-M-C                                |
|SBCB|   |   | C2| D2| E2| F2|..****| B=B-M-C                                |
|SUBA|   |   | 80| 90| A0| B0|..****| A=A-M                                  |
|SUBB|   |   | C0| D0| E0| F0|..****| B=B-M                                  |
|SUBD|   |   | 83| 93| A3| B3|..****| D=D-MM                                 |
+----+---+---+---+---+---+---+------+----------------------------------------+

 LOGICAL INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|ANDA|   |   | 84| 94| A4| B4|..**0.| A=A&M                                  |
|ANDB|   |   | C4| D4| E4| F4|..**0.| B=B&M                                  |
|COMA| 43|   |   |   |   |   |..**01| A=~A                     (=NOTA)       |
|COMB| 53|   |   |   |   |   |..**01| B=~B                     (=NOTB)       |
|EORA|   |   | 88| 98| A8| B8|..**0.| A=A^M                                  |
|EORB|   |   | C8| D8| E8| F8|..**0.| B=B^M                                  |
|NOT |   |   |   |   | 63| 73|..**01| M=~M                                   |
|NOTA| 43|   |   |   |   |   |..**01| A=~A                                   |
|NOTB| 53|   |   |   |   |   |..**01| B=~B                                   |
|ORAA|   |   | 8A| 9A| AA| BA|..**0.| A=A|M                                  |
|ORAB|   |   | CA| DA| EA| FA|..**0.| B=B|M                                  |
+----+---+---+---+---+---+---+------+----------------------------------------+

 SHIFT & ROTATE INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|ASR |   |   |   |   | 67| 77|..****| M=M>>1                                 |
|ASRA| 47|   |   |   |   |   |..****| A=A>>1                                 |
|ASRB| 57|   |   |   |   |   |..****| B=B>>1                                 |
|LSL |   |   |   |   | 68| 78|..****| M=M<<1                                 |
|LSLA| 48|   |   |   |   |   |..****| A=A<<1                                 |
|LSLB| 58|   |   |   |   |   |..****| B=B<<1                                 |
|LSLD| 05|   |   |   |   |   |..****| D=D<<1                                 |
|LSR |   |   |   |   | 64| 74|..0***| M=M>>1                                 |
|LSRA| 44|   |   |   |   |   |..0***| A=A>>1                                 |
|LSRB| 54|   |   |   |   |   |..0***| B=B>>1                                 |
|LSRD| 04|   |   |   |   |   |..0***| D=D>>1                                 |
|ROL |   |   |   |   | 69| 79|..****| M=M<<1+C (C is previous carry)         |
|ROLA| 49|   |   |   |   |   |..****| A=A<<1+C        //                     |
|ROLB| 59|   |   |   |   |   |..****| B=B<<1+C        //                     |
|ROR |   |   |   |   | 66| 76|..****| M=M>>1+C<<8     //                     |
|RORA| 46|   |   |   |   |   |..****| A=A>>1+C<<8     //                     |
|RORB| 56|   |   |   |   |   |..****| B=B>>1+C<<8     //                     |
+----+---+---+---+---+---+---+------+----------------------------------------+

 TEST & COMPARE INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|BITA|   |   | 85| 95| A5| B5|..**0.| A&M                                    |
|BITB|   |   | C5| D5| E5| F5|..**0.| B&M                                    |
|CBA | 11|   |   |   |   |   |..****| B-A                                    |
|CMPA|   |   | 81| 91| A1| B1|..****| A-M                                    |
|CMPB|   |   | C1| D1| E1| F1|..****| B-M                                    |
|CPX |   |   | 8C| 9C| AC| BC|..****| X-MM                                   |
|TST |   |   |   |   | 6D| 7D|..**00| M-0                                    |
|TSTA| 4D|   |   |   |   |   |..**00| A-0                                    |
|TSTB| 5D|   |   |   |   |   |..**00| B-0                                    |
+----+---+---+---+---+---+---+------+----------------------------------------+

 STATUS REGISTER INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|CLC | 0C|   |   |   |   |   |.....0| C=0                                    |
|CLI | 0E|   |   |   |   |   |.0....| I=0                                    |
|CLV | 0A|   |   |   |   |   |....0.| V=0                                    |
|SEC | 0D|   |   |   |   |   |.....1| C=1                                    |
|SEI | 0F|   |   |   |   |   |.1....| I=1                                    |
|SEV | 0B|   |   |   |   |   |....1.| V=1                                    |
+----+---+---+---+---+---+---+------+----------------------------------------+

 BRANCHING INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|BCC |   | 24|   |   |   |   |......| if C=0 then PC=PC+M                    |
|BCS |   | 25|   |   |   |   |......| if C=1 then PC=PC+M                    |
|BEQ |   | 27|   |   |   |   |......| if Z=1 then PC=PC+M                    |
|BGE |   | 2C|   |   |   |   |......| if N^V=0 then PC=PC+M                  |
|BGT |   | 2E|   |   |   |   |......| if Z|(N^V) then PC=PC+M                |
|BHI |   | 22|   |   |   |   |......| if C|Z=0 then PC=PC+M                  |
|BLE |   | 2F|   |   |   |   |......| if Z|(N^V)=1 then PC=PC+M              |
|BLS |   | 23|   |   |   |   |......| if C|Z=1 then PC=PC+M                  |
|BLT |   | 2D|   |   |   |   |......| if N^V=1 then PC=PC+M                  |
|BMI |   | 2B|   |   |   |   |......| if N=1 then PC=PC+M                    |
|BNE |   | 26|   |   |   |   |......| if Z=0 then PC=PC+M                    |
|BPL |   | 2A|   |   |   |   |......| if N=0 then PC=PC+M                    |
|BVC |   | 28|   |   |   |   |......| if V=0 then PC=PC+M                    |
|BVS |   | 29|   |   |   |   |......| if V=1 then PC=PC+M                    |
|BRA |   | 20|   |   |   |   |......| PC=PC+M                                |
|BRN |   | 21|   |   |   |   |......| PC=PC+0                                |
|BSR |   | 8D|   |   |   |   |......| (SP)=PC,SP-,PC=PC+M                    |
|JMP |   |   |   |   | 6E| 7E|......| PC=MM                                  |
|JSR |   |   |   | 9D| AD| BD|......| (SP)=PC,SP-,PC=PC+M                    |
+----+---+---+---+---+---+---+------+----------------------------------------+

 OTHER INSTRUCTIONS
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|NOP | 01|   |   |   |   |   |......|                                        |
|RTI | 3B|   |   |   |   |   |******| Ret Interrupt                          |
|RTS | 39|   |   |   |   |   |......| Ret                                    |
|SWI | 3F|   |   |   |   |   |.1....| PC=SWI                                 |
|WAI | 3E|   |   |   |   |   |......| PC=PC-1                                |
+----+---+---+---+---+---+---+------+----------------------------------------+

 ADDITIONAL INSTRUCTIONS (6301 only)
+---+------+---+-------------------------------------------------------------+
|AND| #x,M | 71| M=M&x                                                       |
|OR | #x,M | 72| M=M|x                                                       |
|EOR| #x,M | 75| M=M^x                                                       |
|BIT| #x,M | 7B| M&x                                                         |
+---+------+---+-------------------------------------------------------------+

 ADDITIONAL INSTRUCTIONS (6301 only)
+----+---+---+---+---+---+---+------+----------------------------------------+
|Mne |Imp|Rel|Imm|Dir|Ind|Ext|HINZVC| Fonction                               |
+----+---+---+---+---+---+---+------+----------------------------------------+
|AIM |   |   |71 |   |   |   |..**0.| M=M&x                            (=AND)|
|OIM |   |   |72 |   |   |   |..**0.| M=M|x                            (=OR) |
|TIM |   |   |7B |   |   |   |..**0.| x&M                              (=BIT)|
+----+---+---+---+---+---+---+------+----------------------------------------+

